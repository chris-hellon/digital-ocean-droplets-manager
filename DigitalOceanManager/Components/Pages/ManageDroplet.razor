@page "/manage-droplet/{Id}"

<PageTitle>@($"Manage {Droplet?.Name.CapitalizeFirstLetter()} Droplet") | Digital Ocean Droplet Manager</PageTitle>

@if (IsLoaded)
{
    if (Droplet == null)
    {
        <p>Droplet not found...</p>
    }
    else
    {
        <SectionContent SectionName="HeaderNav">
            <TopNavBar Title="@($"Manage {Droplet?.Name.CapitalizeFirstLetter()} Droplet")"/>
            <Breadcrumbs />
        </SectionContent>
    
        if (!string.IsNullOrEmpty(_alertMessage))
        {
            <div class="alert @(_isSuccess ? "alert-success" : "alert-danger") mb-4" role="alert">
                @_alertMessage
            </div>
        }

        if (_isNginxAvailable)
        {
            <DropletWebsites Id="@Id" Websites="@_websites" OnDeleteSiteCallback="@((site) => DeleteSite(site))"
                             IsLoaded="IsLoaded"/>
            <hr/>
        }

        <DropletFirewallRules FirewallRules="_firewallRules" AddFirewallRuleCallback="AddFirewallRule"
                              DenyFirewallRuleCallback="DenyFirewallRule" RemoveFirewallRuleCallback="RemoveFirewallRule"
                              IsLoaded="IsLoaded"/>
    }
    

}
else
{
    <LoaderButton Title="Loading Droplet..." />
}


@code {
    [Parameter] public required string Id { get; set; }
    private Droplet? Droplet { get; set; }
    
    private readonly List<WebsiteModel> _websites = [];
    private List<FirewallRule> _firewallRules = [];

    private bool _isNginxAvailable;
    private bool IsLoaded { get; set; }
    private string _alertMessage = string.Empty;
    private bool _isSuccess = true;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        Droplet = await DropletStateService.GetDropletById(int.Parse(Id));
        
        if (Droplet == null) return;
        
        await BreadcrumbService.SetBreadcrumbs([
            new BreadcrumbItem {Label = $"Manage {Droplet?.Name.CapitalizeFirstLetter()} Droplet", IconClass = "fa-gear"}
        ]);
        
        await DropletStateService.LoadAllSitesAsync(Droplet);
        await LoadWebsitesFromCache();

        _isNginxAvailable = CheckIfNginxExists();
        _firewallRules = Droplet.FirewallRules;

        IsLoaded = true;
        
        StateHasChanged();
    }

    private async Task LoadWebsitesFromCache()
    {
        _websites.Clear();
        var websites = await DropletStateService.GetAllSitesAsync(int.Parse(Id));
        foreach (var website in websites)
        {
            var supervisorConfig = await DropletStateService.GetSiteConfigAsync(int.Parse(Id), website);
            _websites.Add(new WebsiteModel()
            {
                Domain = website,
                SupervisorConfig = supervisorConfig?.SupervisorConfigFile ?? "Not Linked"
            });
        }
    }

    private void LoadFirewallRules()
    {
        _firewallRules.Clear();
        _firewallRules = DropletStateService.GetFirewallRules(Droplet!);
    }

    private bool CheckIfNginxExists()
    {
        var result = ExecuteCommand("systemctl list-units --type=service | grep nginx");
        return !string.IsNullOrWhiteSpace(result);
    }

    private async Task DeleteSite(string site)
    {
        Console.WriteLine($"üóë Deleting site: {site}");

        // ‚úÖ Remove from Nginx
        ExecuteCommand($"sudo rm -f /etc/nginx/sites-enabled/{site}");
        ExecuteCommand($"sudo rm -f /etc/nginx/sites-available/{site}");

        // ‚úÖ Reload Nginx
        ExecuteCommand("sudo nginx -t && sudo systemctl reload nginx");

        // ‚úÖ Get Supervisor config linked to this site
        var siteConfig = await DropletStateService.GetSiteConfigAsync(int.Parse(Id), site);
        if (siteConfig == null)
        {
            Console.WriteLine($"‚ö†Ô∏è Site config for {site} not found. Skipping Supervisor cleanup.");
            return;
        }

        var supervisorFile = siteConfig.SupervisorConfigFile;
        if (!string.IsNullOrWhiteSpace(supervisorFile))
        {
            Console.WriteLine($"üîç Checking if other sites use Supervisor config: {supervisorFile}");

            // ‚úÖ Check if other sites use the same Supervisor config
            var allSites = await DropletStateService.GetAllSitesAsync(int.Parse(Id));
            var otherSites = allSites
                .Where(s => s != site); //Ignore the current site

            var otherUsersExist = false;

            foreach (var otherSite in otherSites)
            {
                var otherSiteConfig = await DropletStateService.GetSiteConfigAsync(int.Parse(Id), otherSite);

                if (otherSiteConfig?.SupervisorConfigFile != supervisorFile) continue;
                
                otherUsersExist = true;
                break;
            }

            if (!otherUsersExist)
            {
                // ‚úÖ No other sites are using this Supervisor config, so remove it
                Console.WriteLine($"üóë Removing Supervisor config: {supervisorFile}");
                ExecuteCommand($"sudo rm -f /etc/supervisor/conf.d/{supervisorFile}");

                // ‚úÖ Stop the program (only if no other sites use it)
                ExecuteCommand($"sudo supervisorctl stop {Path.GetFileNameWithoutExtension(supervisorFile)}");
            }
            else
            {
                Console.WriteLine($"‚ö†Ô∏è Supervisor config {supervisorFile} is still in use by other sites. Not deleting.");
            }
        }

        // ‚úÖ Reload Supervisor
        ExecuteCommand("sudo supervisorctl reread && sudo supervisorctl update");

        // ‚úÖ Remove from session storage
        await DropletStateService.DeleteSiteConfigAsync(int.Parse(Id), site);

        // ‚úÖ Reload UI list
        await LoadWebsitesFromCache();

        Console.WriteLine($"‚úÖ {site} deleted successfully.");
        StateHasChanged();
    }

    private async Task AddFirewallRule(string newIp)
    {
        if (!string.IsNullOrWhiteSpace(newIp))
        {
            ExecuteCommand($"ufw allow from {newIp} to any port 1433");
            LoadFirewallRules();

            await ShowAlert($"IP {newIp} has been allowed access to database ports.", true);
        }
    }

    private async Task DenyFirewallRule(string denyIp)
    {
        if (!string.IsNullOrWhiteSpace(denyIp))
        {
            ExecuteCommand($"ufw deny from {denyIp}");
            LoadFirewallRules();

            await ShowAlert($"IP {denyIp} has been denied access.", true);
        }
    }

    private async Task RemoveFirewallRule(int ruleNumber)
    {
        ExecuteCommand($"echo \"y\" | ufw delete {ruleNumber}");
        LoadFirewallRules();

        await ShowAlert($"Firewall rule {ruleNumber} has been removed.", true);
    }

    private async Task ShowAlert(string message, bool success)
    {
        _alertMessage = message;
        _isSuccess = success;
        StateHasChanged();
        await Task.Delay(3000);
        _alertMessage = string.Empty;
        StateHasChanged();
    }

    private string ExecuteCommand(string command)
    {
        var result = SshService.ExecuteCommand(Droplet?.IpAddress, command);
        StateHasChanged();
        return result;
    }

}